Before we start off with generators, I would like to introduce Iterators first.
Iterators
Iterators is a python type on which we can loop upon.This means inbuilt data types like lists, dicts, tuples, and sets are iterators by default. All the iterators follow the iterator protocol.
Every iterator object uses two methods (or Magic methods)
__iter__ This returns the iterator object itself
__next__ this returns the next value from the iterator
Now lets see this thing with an example in action.
Suppose we have a list of number ranging from 10 to 20, and we want to iterate over that list.
>>> my_list = [10,11,12,13,14,15,16,17,18,19]
>>> for i in my_list:
        print i,
10 11 12 13 14 15 16 17 18 19
>>>
At each iteration cycle, the __iter__ method is called upon the initialization of the list, starting from 10.This returns the object which has a next method and hence when the next method is called over this value 10, it returns the 
next value from the list that is 11.
What happens when we reach 19??
There we have a no more elements to iterate over from the list, so when the next method is called, it raises the StopIteration exception and the execution stops at that point.
The above process can be explained using a class which mimics the range functionality. Lets create that.

So now if we run this, we should be getting the same results as we get by using range() function in Python
>>>for i in mimic_range(10):
       print i,
0 1 2 3 4 5 6 7 8 9
Generators
“All generators are iterators but not vice versa”
A generator is an iterator which is used for lazy evaluation. Now what do we mean by lazy evaluation?
When we have a huge data set and we want to have that loaded into our memory, we can have the generators in place so as to pass in only certain amount of data at a time.
This is completely opposite to what happens when we use iterators, as in that case we have to load the complete data into memory.
That brings us to a point where we should know about the yield keyword.
Generators return generator objects with the help of yield keyword.
Lets get into some action by providing a generator example.
>>>def count_generator(mini,maxi):
 while mini <= maxi:
 yield mini
 mini += 1
>>> for i in count_generator(1,5):
 print i,
1 2 3 4 5
>>>
#As for the generator expression, we define a generator by this
>>>gen = (i for i in range(5))
>>> gen
<generator object <genexpr> at 0x00000000022871B0>
>>> next(gen)
0
>>> next(gen)
1
>>> next(gen)
2
>>> next(gen)
3
>>> next(gen)
4
>>> next(gen)
Traceback (most recent call last):
 File “<pyshell#29>”, line 1, in <module>
 next(gen)
StopIteration
>>> 
I hope that by far you must have got a sneak peak into what are iterators and generators, and I would highly recommend this blog for python noobs or seasoned programmers to get much more insights on the topic !
Happy Coding!
